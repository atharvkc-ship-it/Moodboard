import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { moodboardSchema, MoodboardFormData } from '@/lib/validations';
import { Plus, Upload } from 'lucide-react';

interface CreateMoodboardProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: MoodboardFormData & { images: string[] }) => void;
}

export default function CreateMoodboard({ isOpen, onClose, onSubmit }: CreateMoodboardProps) {
  const [images, setImages] = useState<string[]>([]);
  const [dragOver, setDragOver] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset
  } = useForm<MoodboardFormData>({
    resolver: zodResolver(moodboardSchema)
  });

  const handleFormSubmit = (data: MoodboardFormData) => {
    onSubmit({ ...data, images });
    reset();
    setImages([]);
    onClose();
  };

  const handleImageUpload = (files: FileList | null) => {
    if (!files) return;

    Array.from(files).forEach(file => {
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => {
          if (e.target?.result) {
            setImages(prev => [...prev, e.target!.result as string]);
          }
        };
        reader.readAsDataURL(file);
      }
    });
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
    handleImageUpload(e.dataTransfer.files);
  };

  const removeImage = (index: number) => {
    setImages(prev => prev.filter((_, i) => i !== index));
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Create New Moodboard</DialogTitle>
          <DialogDescription>
            Add a title, description, and upload images for your moodboard.
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-4">
          <div>
            <Label htmlFor="title">Title *</Label>
            <Input
              id="title"
              placeholder="Enter moodboard title"
              {...register('title')}
              className={errors.title ? 'is-invalid' : ''}
            />
            {errors.title && (
              <div className="invalid-feedback d-block">
                {errors.title.message}
              </div>
            )}
          </div>

          <div>
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              placeholder="Describe your moodboard (optional)"
              rows={3}
              {...register('description')}
              className={errors.description ? 'is-invalid' : ''}
            />
            {errors.description && (
              <div className="invalid-feedback d-block">
                {errors.description.message}
              </div>
            )}
          </div>

          <div>
            <Label>Images</Label>
            <div
              className={`border-2 border-dashed rounded-lg p-4 text-center transition-colors ${
                dragOver ? 'border-primary bg-primary bg-opacity-10' : 'border-gray-300'
              }`}
              onDragOver={handleDragOver}
              onDragLeave={handleDragLeave}
              onDrop={handleDrop}
            >
              <Upload className="mx-auto mb-2 text-muted" size={32} />
              <p className="text-muted mb-2">
                Drag and drop images here, or{' '}
                <label className="text-primary cursor-pointer">
                  browse files
                  <input
                    type="file"
                    multiple
                    accept="image/*"
                    className="d-none"
                    onChange={(e) => handleImageUpload(e.target.files)}
                  />
                </label>
              </p>
              <small className="text-muted">Supports JPG, PNG, GIF up to 5MB each</small>
            </div>

            {images.length > 0 && (
              <div className="row g-2 mt-3">
                {images.map((image, index) => (
                  <div key={index} className="col-4">
                    <div className="position-relative">
                      <img
                        src={image}
                        alt={`Upload ${index + 1}`}
                        className="w-100 rounded"
                        style={{ aspectRatio: '1', objectFit: 'cover' }}
                      />
                      <Button
                        type="button"
                        variant="destructive"
                        size="sm"
                        className="position-absolute top-0 end-0 m-1 p-1 rounded-circle"
                        onClick={() => removeImage(index)}
                      >
                        Ã—
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          <div className="d-flex justify-content-end gap-2">
            <Button type="button" variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button type="submit">
              <Plus className="me-1" size={16} />
              Create Moodboard
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}
